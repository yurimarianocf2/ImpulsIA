{
  "name": "FarmaBot - Consulta de Pre√ßos Inteligente",
  "nodes": [
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "searchTerm",
              "value": "={{$json.text.toLowerCase().replace(/qual o pre√ßo d[eo]?|quanto custa o?|valor d[eo]?|pre√ßo d[eo]?/gi, '').trim()}}"
            },
            {
              "name": "farmaciaId",
              "value": "={{$env.FARMACIA_ID}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Extrair Produto",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [450, 300],
      "id": "extract-product"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{$env.SUPABASE_URL}}/rest/v1/rpc/buscar_produtos_similar",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "p_farmacia_id",
              "value": "={{$json.farmaciaId}}"
            },
            {
              "name": "p_termo",
              "value": "={{$json.searchTerm}}"
            },
            {
              "name": "p_limit",
              "value": "5"
            }
          ]
        }
      },
      "name": "Buscar Produtos Similar",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [650, 300],
      "id": "search-similar"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": false,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "value1": "={{$json.length}}",
              "operation": "larger",
              "value2": 0
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "name": "Produtos Encontrados?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [850, 300],
      "id": "check-results"
    },
    {
      "parameters": {
        "jsCode": "// Formatar produtos encontrados\nconst produtos = $input.all();\nlet resposta = 'üíä *Produtos encontrados:*\\n\\n';\n\nprodutos.forEach((item, index) => {\n  const p = item.json;\n  const disponivel = p.estoque_atual > 0;\n  const emoji = disponivel ? '‚úÖ' : '‚ùå';\n  \n  resposta += `${index + 1}. *${p.nome}*\\n`;\n  resposta += `   üí∞ R$ ${p.preco_venda.toFixed(2).replace('.', ',')}\\n`;\n  resposta += `   ${emoji} ${disponivel ? 'Dispon√≠vel' : 'Indispon√≠vel'}\\n`;\n  \n  if (p.principio_ativo) {\n    resposta += `   üß™ ${p.principio_ativo}\\n`;\n  }\n  \n  resposta += '\\n';\n});\n\nresposta += '_Digite o n√∫mero do produto para mais informa√ß√µes ou realizar pedido._';\n\nreturn { \n  response: resposta,\n  produtos: produtos.map(p => p.json),\n  totalEncontrado: produtos.length\n};"
      },
      "name": "Formatar Resposta",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1050, 200],
      "id": "format-response"
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "response",
              "value": "üòî Desculpe, n√£o encontrei nenhum produto com esse nome.\n\nPosso ajudar de outras formas:\nüì± Digite *cat√°logo* para ver todos os produtos\nüîç Tente buscar por outro nome\nüí¨ Ou descreva o que voc√™ precisa"
            }
          ]
        },
        "options": {}
      },
      "name": "Produto N√£o Encontrado",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [1050, 400],
      "id": "not-found"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": "public",
        "table": "conversas",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "contexto": "={{JSON.stringify({ultimaBusca: $json.searchTerm, produtosEncontrados: $json.produtos, timestamp: new Date().toISOString()})}}",
            "ultima_mensagem": "={{new Date().toISOString()}}"
          }
        },
        "where": {
          "condition": "AND",
          "values": [
            {
              "column": "whatsapp_id",
              "value": "={{$json.from}}"
            }
          ]
        }
      },
      "name": "Atualizar Contexto",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1250, 300],
      "id": "update-context"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{$env.ERP_API_URL}}/api/produtos/sincronizar-preco",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBasicAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "produtos",
              "value": "={{$json.produtos.map(p => p.codigo_barras)}}"
            }
          ]
        },
        "options": {
          "batching": {
            "batch": {
              "batchSize": 10
            }
          },
          "timeout": 5000
        }
      },
      "name": "Sincronizar com ERP",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [850, 100],
      "continueOnFail": true,
      "id": "sync-erp"
    },
    {
      "parameters": {
        "content": "## üîç Fluxo de Consulta de Pre√ßos\n\nEste fluxo especializado:\n\n1. **Extrai** o nome do produto da mensagem\n2. **Busca** produtos similares usando fuzzy search\n3. **Sincroniza** pre√ßos com ERP (opcional)\n4. **Formata** resposta amig√°vel\n5. **Salva** contexto para pr√≥ximas intera√ß√µes\n\n### Funcionalidades:\n- Busca inteligente (typos, sin√¥nimos)\n- Mostra disponibilidade em tempo real\n- Permite sele√ß√£o para pedido\n- Sincroniza√ß√£o com ERP",
        "height": 300,
        "width": 350
      },
      "name": "Documenta√ß√£o",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [100, 200],
      "id": "docs"
    }
  ],
  "connections": {
    "Extrair Produto": {
      "main": [
        [
          {
            "node": "Buscar Produtos Similar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Buscar Produtos Similar": {
      "main": [
        [
          {
            "node": "Produtos Encontrados?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Produtos Encontrados?": {
      "main": [
        [
          {
            "node": "Sincronizar com ERP",
            "type": "main",
            "index": 0
          },
          {
            "node": "Formatar Resposta",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Produto N√£o Encontrado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatar Resposta": {
      "main": [
        [
          {
            "node": "Atualizar Contexto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Produto N√£o Encontrado": {
      "main": [
        [
          {
            "node": "Atualizar Contexto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateId": "price-check-v1"
  }
} 